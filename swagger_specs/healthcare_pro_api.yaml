openapi: 3.0.3
info:
  title: HealthCare Pro API
  description: |
    API hybride avancée pour la gestion des données de santé avec support REST et HL7.

    ## Authentification OAuth 2.0 + JWT
    Cette API utilise OAuth 2.0 avec des tokens JWT et des refresh tokens pour une sécurité optimale.

    ### Fonctionnalités d'authentification:
    - **Access tokens** courts (15 minutes) pour les requêtes
    - **Refresh tokens** longs (7 jours) pour le renouvellement
    - **Scopes granulaires** pour un contrôle d'accès précis
    - **Révocation de tokens** pour une sécurité renforcée

    ### Grant types supportés:
    - `client_credentials`: Authentification initiale
    - `refresh_token`: Renouvellement automatique

    ## Architecture hybride
    - **API REST classique** : `/api/*` (patients, rendez-vous) - JSON simple
    - **Endpoints HL7** : `/hl7/*` (messages ADT) - Format HL7 v2.4

    ## Scopes disponibles
    - `read:patients` : Lecture des patients
    - `write:patients` : Création/modification des patients
    - `read:appointments` : Lecture des rendez-vous
    - `write:appointments` : Gestion des rendez-vous
    - `hl7:process` : Traitement des messages HL7

  version: 2.2.0
  contact:
    name: HealthCare Pro Support
    email: support@healthcare-pro.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

servers:
  - url: https://healthcare-pro-api.onrender.com
    description: Serveur de production

security:
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Vérification de santé de l'API
      description: Endpoint pour vérifier que l'API fonctionne correctement
      tags:
        - Health
      security: []
      responses:
        "200":
          description: API opérationnelle
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: operational
                  service:
                    type: string
                    example: HealthCare Pro API (Hybride REST/HL7)
                  version:
                    type: string
                    example: 2.2.0
                  api_types:
                    type: object
                    properties:
                      rest:
                        type: string
                        example: /api/* (patients, appointments)
                      hl7:
                        type: string
                        example: /hl7/* (ADT messages)
                  authentication:
                    type: string
                    example: JWT Bearer Token
                  timestamp:
                    type: string
                    format: date-time
                    example: 2024-03-20T10:30:00Z

  /auth/token:
    post:
      summary: Obtenir des tokens d'authentification
      description: |
        Endpoint OAuth 2.0 pour obtenir des tokens JWT d'accès et de rafraîchissement.
        Support des grant types client_credentials et refresh_token.
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/ClientCredentialsRequest"
                - $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: Tokens générés avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: Grant type non supporté ou paramètres manquants
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Credentials invalides ou refresh token expiré
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/revoke:
    post:
      summary: Révoquer un refresh token
      description: Révoque un refresh token pour des raisons de sécurité
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Refresh token à révoquer
      responses:
        "200":
          description: Token révoqué avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token revoked successfully
        "400":
          description: Token manquant ou invalide
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  # REST API ENDPOINTS
  /api/patients:
    get:
      summary: Lister tous les patients (REST)
      description: |
        Récupère la liste des patients au format JSON simple.
        Support du filtrage par recherche et statut actif.
      tags:
        - REST Patients
      security:
        - BearerAuth: [read:patients]
      parameters:
        - name: search
          in: query
          required: false
          description: Recherche par nom, prénom ou numéro patient
          schema:
            type: string
            example: pierre
        - name: active
          in: query
          required: false
          description: Filtrer par statut actif
          schema:
            type: boolean
            example: true
      responses:
        "200":
          description: Liste des patients récupérée avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientsResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

    post:
      summary: Créer un nouveau patient (REST)
      description: Ajoute un nouveau patient au système
      tags:
        - REST Patients
      security:
        - BearerAuth: [write:patients]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientCreate"
      responses:
        "201":
          description: Patient créé avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientResponse"
        "400":
          description: Données invalides ou champs manquants
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /api/patients/{patient_id}:
    get:
      summary: Récupérer un patient spécifique (REST)
      description: Retourne les informations détaillées d'un patient
      tags:
        - REST Patients
      security:
        - BearerAuth: [read:patients]
      parameters:
        - name: patient_id
          in: path
          required: true
          description: Identifiant unique du patient
          schema:
            type: string
            example: hcp-patient-001
      responses:
        "200":
          description: Patient trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientResponse"
        "404":
          description: Patient non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

    put:
      summary: Mettre à jour un patient (REST)
      description: Modifie les informations d'un patient existant
      tags:
        - REST Patients
      security:
        - BearerAuth: [write:patients]
      parameters:
        - name: patient_id
          in: path
          required: true
          description: Identifiant unique du patient
          schema:
            type: string
            example: hcp-patient-001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientUpdate"
      responses:
        "200":
          description: Patient mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientResponse"
        "404":
          description: Patient non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "400":
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /api/appointments:
    get:
      summary: Lister tous les rendez-vous (REST)
      description: |
        Récupère la liste des rendez-vous au format JSON simple.
        Support de multiples filtres.
      tags:
        - REST Appointments
      security:
        - BearerAuth: [read:appointments]
      parameters:
        - name: date
          in: query
          required: false
          description: Filtrer par date (format YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: 2024-03-22
        - name: status
          in: query
          required: false
          description: Filtrer par statut
          schema:
            type: string
            enum: [booked, confirmed, completed, cancelled]
            example: booked
        - name: patient_id
          in: query
          required: false
          description: Filtrer par patient
          schema:
            type: string
            example: hcp-patient-001
        - name: doctor_id
          in: query
          required: false
          description: Filtrer par médecin
          schema:
            type: string
            example: dr-garcia
      responses:
        "200":
          description: Liste des rendez-vous récupérée avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentsResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

    post:
      summary: Créer un nouveau rendez-vous (REST)
      description: Ajoute un nouveau rendez-vous au système
      tags:
        - REST Appointments
      security:
        - BearerAuth: [write:appointments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppointmentCreate"
      responses:
        "201":
          description: Rendez-vous créé avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentResponse"
        "400":
          description: Données invalides ou patient non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /api/appointments/{appointment_id}:
    get:
      summary: Récupérer un rendez-vous spécifique (REST)
      description: Retourne les informations détaillées d'un rendez-vous
      tags:
        - REST Appointments
      security:
        - BearerAuth: [read:appointments]
      parameters:
        - name: appointment_id
          in: path
          required: true
          description: Identifiant unique du rendez-vous
          schema:
            type: string
            example: hcp-appointment-001
      responses:
        "200":
          description: Rendez-vous trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentResponse"
        "404":
          description: Rendez-vous non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

    put:
      summary: Mettre à jour un rendez-vous (REST)
      description: Modifie les informations d'un rendez-vous existant
      tags:
        - REST Appointments
      security:
        - BearerAuth: [write:appointments]
      parameters:
        - name: appointment_id
          in: path
          required: true
          description: Identifiant unique du rendez-vous
          schema:
            type: string
            example: hcp-appointment-001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppointmentUpdate"
      responses:
        "200":
          description: Rendez-vous mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentResponse"
        "404":
          description: Rendez-vous non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "400":
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

    delete:
      summary: Supprimer un rendez-vous (REST)
      description: Supprime définitivement un rendez-vous
      tags:
        - REST Appointments
      security:
        - BearerAuth: [write:appointments]
      parameters:
        - name: appointment_id
          in: path
          required: true
          description: Identifiant unique du rendez-vous
          schema:
            type: string
            example: hcp-appointment-001
      responses:
        "200":
          description: Rendez-vous supprimé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Appointment deleted successfully
        "404":
          description: Rendez-vous non trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  # HL7 ENDPOINTS
  /hl7/ADT:
    post:
      summary: Traiter un message HL7 ADT
      description: |
        Endpoint pour le traitement des messages HL7 v2.4 ADT (Admit, Discharge, Transfer).
        Accepte des messages HL7 bruts et retourne une confirmation ACK.
      tags:
        - HL7 Integration
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/hl7-v2:
            schema:
              type: string
              example: |
                MSH|^~\&|SENDING_APP|SENDING_FACILITY|HEALTHCARE_PRO|HCP_SYSTEM|20240322143000||ADT^A01|12345|P|2.4
                EVN|A01|20240322143000
                PID|1||HCP001^^^HCP^MR||Dubois^Pierre^Michel||19781108|M||||||^PRN^PH^^^33^145678901
                PV1|1|I|ICU^101^1|||^Garcia^Elena^Dr|||||||||||12345|||||||||||||||||||||20240322100000
          text/plain:
            schema:
              type: string
              example: |
                MSH|^~\&|SENDING_APP|SENDING_FACILITY|HEALTHCARE_PRO|HCP_SYSTEM|20240322143000||ADT^A01|12345|P|2.4
                EVN|A01|20240322143000
                PID|1||HCP001^^^HCP^MR||Dubois^Pierre^Michel||19781108|M||||||^PRN^PH^^^33^145678901
                PV1|1|I|ICU^101^1|||^Garcia^Elena^Dr|||||||||||12345|||||||||||||||||||||20240322100000
      responses:
        "200":
          description: Message traité avec succès - Retourne un ACK HL7
          content:
            application/hl7-v2:
              schema:
                type: string
                example: |
                  MSH|^~\&|HEALTHCARE_PRO|HCP_SYSTEM|SENDING_APP|SENDING_FACILITY|20240322143500||ACK|12345|P|2.4
                  MSA|AA|12345|Message accepted and processed successfully
        "400":
          description: Message HL7 invalide
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /hl7/sample:
    get:
      summary: Obtenir un exemple de message HL7
      description: Retourne un exemple de message HL7 ADT pour les tests
      tags:
        - HL7 Integration
      security: []
      responses:
        "200":
          description: Exemple de message HL7 ADT
          content:
            application/hl7-v2:
              schema:
                type: string
                example: |
                  MSH|^~\&|SENDING_APP|SENDING_FACILITY|HEALTHCARE_PRO|HCP_SYSTEM|20240322143000||ADT^A01|12345|P|2.4
                  EVN|A01|20240322143000
                  PID|1||HCP001^^^HCP^MR||Dubois^Pierre^Michel||19781108|M||||||^PRN^PH^^^33^145678901
                  PV1|1|I|ICU^101^1|||^Garcia^Elena^Dr|||||||||||12345|||||||||||||||||||||20240322100000

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Token JWT obtenu via l'endpoint /auth/token.

        Exemple: Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...

        Scopes disponibles:
        - read:patients: Lecture des patients
        - write:patients: Création/modification des patients
        - read:appointments: Lecture des rendez-vous
        - write:appointments: Gestion des rendez-vous
        - hl7:process: Traitement des messages HL7

  responses:
    UnauthorizedError:
      description: Token manquant, invalide ou expiré
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthError"

    ForbiddenError:
      description: Permissions insuffisantes (scopes manquants)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ForbiddenError"

  schemas:
    # Authentication Schemas
    ClientCredentialsRequest:
      type: object
      required:
        - grant_type
        - client_id
        - client_secret
      properties:
        grant_type:
          type: string
          enum: [client_credentials]
          example: client_credentials
        client_id:
          type: string
          example: healthcare_pro_client
        client_secret:
          type: string
          example: healthcare_secret_2024
        scope:
          type: string
          description: Scopes demandés (séparés par des espaces)
          example: read:patients write:appointments

    RefreshTokenRequest:
      type: object
      required:
        - grant_type
        - refresh_token
      properties:
        grant_type:
          type: string
          enum: [refresh_token]
          example: refresh_token
        refresh_token:
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Token JWT d'accès
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
        refresh_token:
          type: string
          description: Token de rafraîchissement
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
          description: Durée de validité de l'access token en secondes
          example: 900
        refresh_expires_in:
          type: integer
          description: Durée de validité du refresh token en secondes
          example: 604800
        scope:
          type: string
          description: Scopes accordés
          example: read:patients write:patients read:appointments

    # Patient Schemas (REST)
    Patient:
      type: object
      properties:
        id:
          type: string
          description: Identifiant unique du patient
          example: hcp-patient-001
        patient_number:
          type: string
          description: Numéro du patient
          example: HCP001
        first_name:
          type: string
          description: Prénom
          example: Pierre
        last_name:
          type: string
          description: Nom de famille
          example: Dubois
        middle_name:
          type: string
          description: Deuxième prénom
          example: Michel
        email:
          type: string
          format: email
          description: Adresse email
          example: pierre.dubois@email.com
        phone:
          type: string
          description: Numéro de téléphone
          example: +33145678901
        gender:
          type: string
          enum: [male, female, other, unknown]
          example: male
        birth_date:
          type: string
          format: date
          description: Date de naissance
          example: 1978-11-08
        address:
          type: object
          properties:
            street:
              type: string
              example: 789 Boulevard de l'Hôpital
            city:
              type: string
              example: Marseille
            postal_code:
              type: string
              example: "13001"
            country:
              type: string
              example: FR
        emergency_contact:
          type: object
          nullable: true
          properties:
            name:
              type: string
              example: Marie Dubois
            phone:
              type: string
              example: +33145678902
            relationship:
              type: string
              example: spouse
        active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: 2024-01-15T10:30:00.000Z
        updated_at:
          type: string
          format: date-time
          example: 2024-01-15T10:30:00.000Z

    PatientCreate:
      type: object
      required:
        - first_name
        - last_name
        - email
        - birth_date
      properties:
        first_name:
          type: string
          example: Pierre
        last_name:
          type: string
          example: Dubois
        middle_name:
          type: string
          example: Michel
        email:
          type: string
          format: email
          example: pierre.dubois@email.com
        phone:
          type: string
          example: +33145678901
        gender:
          type: string
          enum: [male, female, other, unknown]
          example: male
        birth_date:
          type: string
          format: date
          example: 1978-11-08
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            postal_code:
              type: string
            country:
              type: string
        emergency_contact:
          type: object
          nullable: true
          properties:
            name:
              type: string
            phone:
              type: string
            relationship:
              type: string
        active:
          type: boolean
          default: true

    PatientUpdate:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        gender:
          type: string
          enum: [male, female, other, unknown]
        birth_date:
          type: string
          format: date
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            postal_code:
              type: string
            country:
              type: string
        emergency_contact:
          type: object
          nullable: true
          properties:
            name:
              type: string
            phone:
              type: string
            relationship:
              type: string
        active:
          type: boolean

    # Appointment Schemas (REST)
    Appointment:
      type: object
      properties:
        id:
          type: string
          example: hcp-appointment-001
        patient_id:
          type: string
          example: hcp-patient-001
        patient_name:
          type: string
          example: Pierre Michel Dubois
        doctor_id:
          type: string
          example: dr-garcia
        doctor_name:
          type: string
          example: Dr. Elena Garcia
        appointment_type:
          type: string
          enum: [routine, followup, emergency, specialist]
          example: routine
        service_category:
          type: string
          example: General Practice
        service_type:
          type: string
          example: Consultation
        status:
          type: string
          enum: [booked, confirmed, completed, cancelled]
          example: booked
        priority:
          type: string
          enum: [low, normal, high, urgent]
          example: normal
        description:
          type: string
          example: Consultation de suivi médical général
        start_time:
          type: string
          format: date-time
          example: 2024-03-22T10:00:00.000Z
        end_time:
          type: string
          format: date-time
          example: 2024-03-22T10:30:00.000Z
        duration_minutes:
          type: integer
          example: 30
        reason:
          type: string
          example: Encounter for check up
        notes:
          type: string
          example: ""
        created_at:
          type: string
          format: date-time
          example: 2024-01-15T11:30:00.000Z
        updated_at:
          type: string
          format: date-time
          example: 2024-01-15T11:30:00.000Z

    AppointmentCreate:
      type: object
      required:
        - patient_id
        - doctor_id
        - start_time
        - end_time
        - description
      properties:
        patient_id:
          type: string
          example: hcp-patient-001
        doctor_id:
          type: string
          example: dr-garcia
        doctor_name:
          type: string
          example: Dr. Elena Garcia
        appointment_type:
          type: string
          enum: [routine, followup, emergency, specialist]
          default: routine
        service_category:
          type: string
          default: General Practice
        service_type:
          type: string
          default: Consultation
        status:
          type: string
          enum: [booked, confirmed, completed, cancelled]
          default: booked
        priority:
          type: string
          enum: [low, normal, high, urgent]
          default: normal
        description:
          type: string
          example: Consultation de suivi médical général
        start_time:
          type: string
          format: date-time
          example: 2024-03-22T10:00:00.000Z
        end_time:
          type: string
          format: date-time
          example: 2024-03-22T10:30:00.000Z
        duration_minutes:
          type: integer
          default: 30
        reason:
          type: string
        notes:
          type: string

    AppointmentUpdate:
      type: object
      properties:
        doctor_id:
          type: string
        doctor_name:
          type: string
        appointment_type:
          type: string
          enum: [routine, followup, emergency, specialist]
        service_category:
          type: string
        service_type:
          type: string
        status:
          type: string
          enum: [booked, confirmed, completed, cancelled]
        priority:
          type: string
          enum: [low, normal, high, urgent]
        description:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        duration_minutes:
          type: integer
        reason:
          type: string
        notes:
          type: string

    # Response Schemas
    PatientsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/Patient"
        total:
          type: integer
          example: 2
        timestamp:
          type: string
          format: date-time

    PatientResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: "#/components/schemas/Patient"
        message:
          type: string
          example: Patient created successfully

    AppointmentsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/Appointment"
        total:
          type: integer
          example: 2
        timestamp:
          type: string
          format: date-time

    AppointmentResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: "#/components/schemas/Appointment"
        message:
          type: string
          example: Appointment created successfully

    # Error Schemas
    Error:
      type: object
      properties:
        error:
          type: string
          description: Message d'erreur
          example: Invalid token

    AuthError:
      type: object
      properties:
        error:
          type: string
          example: Access token has expired
        message:
          type: string
          example: Use refresh token to get a new access token

    ForbiddenError:
      type: object
      properties:
        error:
          type: string
          example: Insufficient permissions
        missing_scopes:
          type: array
          items:
            type: string
          example: [write:patients]

    ValidationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: Missing required fields
        missing_fields:
          type: array
          items:
            type: string
          example: [first_name, email]

    NotFoundError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: Patient not found
        message:
          type: string
          example: Patient with id 'hcp-patient-999' not found

tags:
  - name: Health
    description: Endpoints de santé et statut de l'API
  - name: Authentication
    description: Authentification OAuth 2.0 avec JWT et refresh tokens
  - name: REST Patients
    description: Gestion des patients au format REST (JSON simple)
  - name: REST Appointments
    description: Gestion des rendez-vous au format REST (JSON simple)
  - name: HL7 Integration
    description: Intégration HL7 v2.4 pour les messages ADT
